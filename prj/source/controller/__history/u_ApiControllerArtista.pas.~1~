unit u_ApiControllerArtista;

interface

uses
  System.Classes, Graphics,
  Vcl.Dialogs, Vcl.imaging.jpeg, Vcl.ExtCtrls,
  System.SysUtils,
  System.StrUtils, Web.HTTPApp,
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Intf,
  MVCFramework.Serializer.Commons,

  IdComponent, IdTCPConnection, IdTCPClient,
  IdHTTP, IdBaseComponent, IdAntiFreezeBase, IdAntiFreeze,
  IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL;

type

  [MVCPath('/api')]
  TApiControllerArtista = class(TMVCController)
  protected
    procedure OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean); override;
    procedure OnAfterAction(Context: TWebContext; const AActionName: string); override;
  public
    // - Path ARTISTA
    [MVCPath('/artistas')]
    [MVCHTTPMethod([httpGET])]
    procedure GetArtistas;

    [MVCPath('/artistascategoria')]
    [MVCHTTPMethod([httpGET])]
    procedure GetArtistasCategoria;

    [MVCPath('/artista/($art_id)')]
    [MVCHTTPMethod([httpGET])]
    procedure GetArtista(art_id: Integer);

    [MVCPath('/artista')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreateArtista;

    [MVCPath('/artista/($art_id)')]
    [MVCHTTPMethod([httpPUT])]
    procedure UpdateArtista(art_id: Integer);

    [MVCPath('/artista/($art_id)')]
    [MVCHTTPMethod([httpDELETE])]
    procedure DeleteArtista(art_id: Integer);
    // - Path ARTISTA

    // - Path ALBUM
    [MVCPath('/albuns')]
    [MVCHTTPMethod([httpGET])]
    procedure GetAlbuns;

    [MVCPath('/albumcategoria')]
    [MVCHTTPMethod([httpGET])]
    procedure GetAlbunsCategoria;

    [MVCPath('/albumartista')]
    [MVCHTTPMethod([httpGET])]
    procedure GetAlbunsArtista;

    [MVCPath('/album/($alb_id)')]
    [MVCHTTPMethod([httpGET])]
    procedure GetAlbum(alb_id: Integer);

    [MVCPath('/album')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreateAlbum;

    [MVCPath('/album/($alb_id)')]
    [MVCHTTPMethod([httpPUT])]
    procedure UpdateAlbum(alb_id: Integer);

    [MVCPath('/album/($alb_id)')]
    [MVCHTTPMethod([httpDELETE])]
    procedure DeleteAlbum(alb_id: Integer);
    // - Path ALBUM

    // - Path CAPA
    [MVCPath('/capas')]
    [MVCHTTPMethod([httpGET])]
    procedure GetCapas;

    [MVCPath('/capaalbumcategoria')]
    [MVCHTTPMethod([httpGET])]
    procedure GetCapasCategoria;

    [MVCPath('/capaalbumartista')]
    [MVCHTTPMethod([httpGET])]
    procedure GetCapasArtista;

    [MVCPath('/capa/($cp_id)')]
    [MVCHTTPMethod([httpGET])]
    procedure GetCapa(cp_id: Integer);

    [MVCPath('/capa')]
    [MVCHTTPMethod([httpPOST])]
    procedure CreateCapa;

    [MVCPath('/capa/($cp_id)')]
    [MVCHTTPMethod([httpPUT])]
    procedure UpdateCapa(cp_id: Integer);

    [MVCPath('/capa/($cp_id)')]
    [MVCHTTPMethod([httpDELETE])]
    procedure DeleteCapa(cp_id: Integer);
    // - Path CAPA

  end;

implementation

uses
  u_ArtistaService, u_ArtistaClass,
  u_AlbumService, u_AlbumClass,
  u_CapaService, u_CapaClass,
  u00_Global;

{ TApiControllerPublic }

procedure TApiControllerPublic.GetMyRootPage;
begin
  ContentType := TMVCMediaType.TEXT_HTML;
  Render(
    '<h1>'+ C_nome_aplicacao+ ' - '+C_versao_aplicacao+ ' - '+C_data_compilacao+'</h1>' + sLineBreak +
    '<p>'+C_desc_aplicacao+'</p>' + sLineBreak +
    '</br>' + sLineBreak +

    '<dl>' + sLineBreak +
//    '<dt>Servidor: </dt><dd>' + ConfiguracaoApp.Servidor       + '</dd>' + sLineBreak +
//    '<dt>Porta: </dt><dd>'    + ConfiguracaoApp.Porta.ToString + '</dd>' + sLineBreak +
//    '<dt>Caminho: </dt><dd>'  + ConfiguracaoApp.Caminho        + '</dd>' + sLineBreak +
    '</dl>'
  );
end;

{ TApiControllerPublic }

procedure TApiController.OnAfterAction(Context: TWebContext; const AActionName: string);
begin
  { Executed after each action }
  inherited;
end;

procedure TApiController.OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean);
begin
  { Executed before each action
    if handled is true (or an exception is raised) the actual
    action will not be called }
  inherited;
end;

    // - Path ARTISTA
procedure TApiController.GetArtistas;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /artistas / QUERY PARAMS (por ART_NOME)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TArtista>(TArtistaService.GetArtistas('ART_NOME', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetArtistasCategoria;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /artistas / QUERY PARAMS (por ART_CATEGORIA)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TArtista>(TArtistaService.GetArtistas('ART_CATEGORIA', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetArtista(art_id: Integer);
begin
  // metodo GET: /artista/($art_id)
  Render(TArtistaService.GetArtista(art_id));
end;

procedure TApiController.CreateArtista;
var
  AArtista: TArtista;
begin
  // metodo POST: /artista
  AArtista := Context.Request.BodyAs<TArtista>;
  try
    TArtistaService.CreateArtista(AArtista);
    Render(200, 'Artista criado com sucesso');
  finally
    AArtista.Free;
  end;
end;

procedure TApiController.UpdateArtista(art_id: Integer);
var
  AArtista: TArtista;
begin
  // metodo PUT: /artista/($art_id)
  AArtista := Context.Request.BodyAs<TArtista>;
  try
    TArtistaService.UpdateArtista(art_id, AArtista);
    Render(200, Format('Artista %d atualizado com sucesso', [art_id]));
  finally
    AArtista.Free;
  end;
end;

procedure TApiController.DeleteArtista(art_id: Integer);
begin
  // metodo DELETE: /artista/($art_id)
  TArtistaService.DeleteArtista(art_id);
  Render(200, Format('Artista %d apagado com sucesso', [art_id]));
end;
    // - Path ARTISTA

    // - Path ALBUM
procedure TApiController.GetAlbuns;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /albuns / QUERY PARAMS (por ALB_NOME)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TAlbum>(TAlbumService.GetAlbuns('ALB_NOME', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetAlbunsCategoria;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /albuns / QUERY PARAMS (por ART_CATEGORIA)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TAlbum>(TAlbumService.GetAlbuns('ART_CATEGORIA', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetAlbunsArtista;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /albuns / QUERY PARAMS (por ART_NOME)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TAlbum>(TAlbumService.GetAlbuns('ART_NOME', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetAlbum(alb_id: Integer);
begin
  // metodo GET: /album/($alb_id)
  Render(TAlbumService.GetAlbum(alb_id));
end;

procedure TApiController.CreateAlbum;
var
  AAlbum: TAlbum;
begin
  // metodo POST: /album
  AAlbum := Context.Request.BodyAs<TAlbum>;
  try
    TAlbumService.CreateAlbum(AAlbum);
    Render(200, 'Album criado com sucesso');
  finally
    AAlbum.Free;
  end;
end;

procedure TApiController.UpdateAlbum(alb_id: Integer);
var
  AAlbum: TAlbum;
begin
  // metodo PUT: /album/($alb_id)
  AAlbum := Context.Request.BodyAs<TAlbum>;
  try
    TAlbumService.UpdateAlbum(alb_id, AAlbum);
    Render(200, Format('Album %d atualizado com sucesso', [alb_id]));
  finally
    AAlbum.Free;
  end;
end;

procedure TApiController.DeleteAlbum(alb_id: Integer);
begin
  // metodo DELETE: /album/($alb_id)
  TAlbumService.DeleteAlbum(alb_id);
  Render(200, Format('Album %d apagado com sucesso', [alb_id]));
end;
    // - Path ALBUM

    // - Path CAPA
procedure TApiController.GetCapas;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /capass / QUERY PARAMS (por ALB_NOME)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TCapa>(TCapaService.GetCapas('ALB_NOME', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetCapasCategoria;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /capas / QUERY PARAMS (por ART_CATEGORIA)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TCapa>(TCapaService.GetCapas('ART_CATEGORIA', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetCapasArtista;
var
  StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg: String;
begin
  // metodo GET: /capas / QUERY PARAMS (por ART_NOME)
  StrWhereLike := Context.Request.QueryStringParam('wherelike'); // like na clausula where
  StrOrderBy   := Context.Request.QueryStringParam('orderby');   // ordenação ASC/DSC
  StrRegAtual  := Context.Request.QueryStringParam('regatual');  // Nr Reg Atual
  StrQtdReg    := Context.Request.QueryStringParam('qtdereg');   // Qtde Reg Paginação

  Render<TCapa>(TCapaService.GetCapas('ART_NOME', StrWhereLike, StrOrderBy, StrRegAtual, StrQtdReg));
end;

procedure TApiController.GetCapa(cp_id: Integer);
var
  vJpeg: TJPEGImage;
  vMemStrm: TMemoryStream;
  vIdHTTP: TIdHTTP;
  vUrl : string;
  vFSSL : TIdSSLIOHandlerSocketOpenSSL;
begin
  vUrl := TCapaService.GetCapa(cp_id);
  vJpeg := TJPEGImage.Create;
  vMemStrm := TMemoryStream.Create;
  vIdHTTP := TIdHTTP.Create(nil);
  vFSSL := TIdSSLIOHandlerSocketOpenSSL.Create(vIdHTTP);
  vFSSL.SSLOptions.SSLVersions := [sslvTLSv1_1, sslvTLSv1_2];
  vIdHTTP.IOHandler := vFSSL;
  try
    vIdHTTP.Get(vUrl, vMemStrm);
    if (vMemStrm.Size > 0) then
    begin
      vMemStrm.Position := 0;
      vJpeg.LoadFromStream(vMemStrm);
      vJpeg.savetofile('c:\banco\teste2.jpg');
    end;
    ContentType :=  TMVCMediaType.TEXT_HTML;
    Render(vUrl);
  finally
    vJpeg.Free;
    vMemStrm.Free;
    vIdHTTP.Free;
  end;
//  Render(TCapaService.GetCapa(cp_id));
end;

procedure TApiController.CreateCapa;
var
  ACapa: TCapa;
begin
  // metodo POST: /capa
  ACapa := Context.Request.BodyAs<TCapa>;
  try
    TCapaService.CreateCapa(ACapa);
    Render(200, 'Capa criada com sucesso');
  finally
    ACapa.Free;
  end;
end;

procedure TApiController.UpdateCapa(cp_id: Integer);
var
  ACapa: TCapa;
begin
  // metodo PUT: /capa/($cp_id)
  ACapa := Context.Request.BodyAs<TCapa>;
  try
    TCapaService.UpdateCapa(cp_id, ACapa);
    Render(200, Format('Capa %d atualizada com sucesso', [cp_id]));
  finally
    ACapa.Free;
  end;
end;

procedure TApiController.DeleteCapa(cp_id: Integer);
begin
  // metodo DELETE: /capa/($cp_id)
  TCapaService.DeleteCapa(cp_id);
  Render(200, Format('Capa %d apagada com sucesso', [cp_id]));
end;
    // - Path CAPA

end.
