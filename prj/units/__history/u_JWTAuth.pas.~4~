unit u_JWTAuth;

interface

uses
  MVCFramework,
  System.Generics.Collections;

type
  TJWTAuth = class(TInterfacedObject, IMVCAuthenticationHandler)
  public
    procedure OnRequest(const AContext: TWebContext; const AControllerQualifiedClassName, AActionName: string;
      var AAuthenticationRequired: Boolean);
    procedure OnAuthentication(const AContext: TWebContext; const AUserName, APassword: string;
      AUserRoles: TList<string>;
      var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
    procedure OnAuthorization(const AContext: TWebContext; AUserRoles: TList<string>;
      const AControllerQualifiedClassName: string;
      const AActionName: string; var AIsAuthorized: Boolean);
  end;

const
  username = 'admin';
  password = 'password';

implementation

{ TJWTAuth }

procedure TJWTAuth.OnAuthentication(const AContext: TWebContext;
  const AUserName, APassword: string; AUserRoles: TList<string>;
  var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
begin
  // Lugar para checar usuario e senha

  AIsValid := (AUserName = username) and (APassword = password); // True Se usuario e senha forem iguais

  //Quais os acessos do usuario
  AUserRoles.Add('incluir');
  AUserRoles.Add('alterar');
  //AUserRoles.Add('excluir');
end;

procedure TJWTAuth.OnAuthorization(const AContext: TWebContext;
  AUserRoles: TList<string>; const AControllerQualifiedClassName,
  AActionName: string; var AIsAuthorized: Boolean);
begin
  // Lugar para definir os niveis de acesso

  // Como não esta sendo tratados todas as ações o padrão é TRUE para todos
  // as actions não tratadas abaixo
  AIsAuthorized := True;

  // seta autorização de acordo com os acessos
 // if AControllerQualifiedClassName = 'u_ApiController.TApiController' then
  begin
    if AActionName = 'CreateArtista' then
    begin
      AIsAuthorized := AUserRoles.Contains('incluir')
    end;
    if AActionName = 'UpdateArtista' then
    begin
      AIsAuthorized := AUserRoles.Contains('alterar')
    end;
    if AActionName = 'DeleteArtista' then
    begin
      AIsAuthorized := AUserRoles.Contains('excluir')
    end;
  end;

end;

procedure TJWTAuth.OnRequest(const AContext: TWebContext;
  const AControllerQualifiedClassName, AActionName: string;
  var AAuthenticationRequired: Boolean);
begin
  // Lugar para definir quais requisições precisao de autenticação

  // seta autenticação para todas as requisições
  // AAuthenticationRequired := True;
   AAuthenticationRequired := AControllerQualifiedClassName = 'u_ApiController.TApiController';
end;

end.
