unit u_CapaService;

interface

uses
  System.Classes,  Vcl.Forms, Vcl.Dialogs, Vcl.imaging.jpeg,
  System.SysUtils,
  System.Generics.Collections,
  u00_conexao,
  u_CapaClass,
  Data.Cloud.CloudAPI, Data.Cloud.AmazonAPI,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Stan.Def,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.DApt,
  FireDAC.Phys,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client,
  FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef,                //MySql
  FireDAC.Phys.FBDef, FireDAC.Phys.IBBase, FireDAC.Phys.FB, //Firebirdb
  Data.DB;

type
  TCapaService = class
  private

  public
    class function GetCapas(const cField, cWhere, cOrderBy, cRegAtual, cQtdReg: string): TObjectList<TCapa>;
    class function GetCapa(const cCp_id: Integer): TJPEGImage;
    class procedure CreateCapa(const ACapa: TCapa);
    class procedure UpdateCapa(const cCp_id: Integer; const ACapa: TCapa);
    class procedure DeleteCapa(const cCp_id: Integer);
  end;

implementation

uses u00_Global, u00_FunPro;

{ TCapaService }

class function TCapaService.GetCapas(const cField, cWhere, cOrderBy, cRegAtual, cQtdReg: string): TObjectList<TCapa>;
var
  FDConexao: TFDConnection;
  TmpDataset: TDataSet;
  ACapa: TCapa;
  vWhereLike, vOrderBy: string;
  vRegAtual, vQtdReg, vIni, vCont: integer;
begin
  Result := TObjectList<TCapa>.Create;

  FDConexao := TFDConnection.Create(nil);
  try
    vRegAtual := StrToIntDef(cRegAtual,0);
    vQtdReg := StrToIntDef(cQtdReg,0);

    if cWhere.Trim.IsEmpty then
      vWhereLike := ' '
    else
      vWhereLike := ' WHERE ' + cField + ' LIKE ''%' + cWhere + '%'' ';

    if cOrderBy.Trim.IsEmpty then
      vOrderBy := ' ORDER BY ART_ID, ALB_ID, CP_ID '
    else
      vOrderBy := ' ORDER BY ART_NOME ' + cOrderBy +', ALB_NOME ' + cOrderBy;

    FDConexao.ConnectionDefName := NOME_CONEXAO_BD;
    FDConexao.ExecSQL('SELECT * FROM ARTISTA ART ' +
                      ' LEFT OUTER JOIN ALBUM ALB ON ALB.ID_ART = ART.ART_ID ' +
                      ' LEFT OUTER JOIN CAPA CAP ON CAP.ID_ALB = ALB.ALB_ID ' +
                      vWhereLike + vOrderBy, TmpDataset);

    if not TmpDataset.IsEmpty then
    begin
      TmpDataset.First;
      vIni := 0;
      vCont := 0;
      while not TmpDataset.Eof do
      begin
        vIni := vIni+1;
        if (vRegAtual > 0) and (vIni <= vRegAtual) then
        begin
          TmpDataset.Next;
          Continue;
        end;
        vCont := vCont+1;

        ACapa := TCapa.Create;
        ACapa.art_id   := TmpDataset.FieldByName('ART_ID').AsInteger;
        ACapa.art_nome := TmpDataset.FieldByName('ART_NOME').AsString;
        ACapa.art_categoria := TmpDataset.FieldByName('ART_CATEGORIA').AsString;
        ACapa.alb_id   := TmpDataset.FieldByName('ALB_ID').AsInteger;
        ACapa.alb_nome := TmpDataset.FieldByName('ALB_NOME').AsString;
        ACapa.id_art   := TmpDataset.FieldByName('ID_ART').AsInteger;
        ACapa.cp_id   := TmpDataset.FieldByName('CP_ID').AsInteger;
        ACapa.id_alb   := TmpDataset.FieldByName('ID_ALB').AsInteger;
        ACapa.cp_url := TmpDataset.FieldByName('CP_URL').AsString;

        Result.Add(ACapa);
        TmpDataset.Next;
        if (vQtdReg > 0) and (vCont >= vQtdReg) then
        begin
          break;
        end;
      end;
    end
    else
      raise EDatabaseError.Create('Nenhuma Capa/Album cadastrado na base de dados!');
  finally
    TmpDataset.Free;
    FDConexao.Free;
  end;
end;

class function TCapaService.GetCapa(const cCp_id: Integer): TJPEGImage;
var
  vStream : TStream;
  vFile, vBucket : String;
  vImage : TJPEGImage;
  amzConnInf : TAmazonConnectionInfo;
  amzStorServ : TAmazonStorageService;
  amzRegion : TAmazonRegion;
  amzRespInfo : TCloudResponseInfo;
//  amzBuckRes : TAmazonBucketResult;
//  amzObjeRes : TAmazonObjectResult;

begin
  amzConnInf := TAmazonConnectionInfo.Create(nil);
  amzConnInf.UseDefaultEndpoints := False;
//  amzConnInf.AccountName     := '';
//  amzConnInf.AccountKey      := 'zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG';
  amzConnInf.AccountName     := '';
  amzConnInf.AccountKey      := 'ineHNiVyR4MkvEWdQcHJ4KA5p7AwX//kHt/oz63f';
  amzConnInf.Protocol        := 'https';
  amzConnInf.QueueEndpoint   := 'queue.amazonaws.com'; //'play.min.io';  'queue.amazonaws.com';
  amzConnInf.StorageEndpoint := 's3.amazonaws.com';    //'play.min.io';  's3.amazonaws.com';
  amzConnInf.TableEndpoint   := 'sdb.amazonaws.com';   //'play.min.io';  'sdb.amazonaws.com';
  amzConnInf.Region          :=  amzrSAEast1;
  amzRegion                  :=  amzrSAEast1;

  amzStorServ := TAmazonStorageService.Create(amzConnInf);
  amzRespInfo := TCloudResponseInfo.Create;

  //showmessage(amzConnInf.StorageEndpoint);
  //showmessage(TAmazonStorageService.GetRegionString(amzRegion));
  vStream := TMemoryStream.Create;

  vBucket := 'pjc-artistaxalbum';
  vFile   := 'Serj Tankian - Harakiri.jpg';
    //Download do arquivo para a variávei vStream
  amzStorServ.GetObject(vBucket, vFile, vStream, amzRespInfo, amzRegion);
  vImage := TJPEGImage.Create;
  vImage.LoadFromStream(vStream);
  Result := vImage;
  TMemoryStream(vStream).SaveToFile('c:\banco\'+vFile);
end;

{class function TCapaService.GetCapa(const cCp_id: Integer): TCapa;
var
  FDConexao: TFDConnection;
  TmpDataset: TDataSet;
begin
  Result := TCapa.Create;

  FDConexao := TFDConnection.Create(nil);
  try
    FDConexao.ConnectionDefName := NOME_CONEXAO_BD;

    FDConexao.ExecSQL('SELECT * FROM ARTISTA ART ' +
                      ' LEFT OUTER JOIN ALBUM ALB ON ALB.ID_ART = ART.ART_ID ' +
                      ' LEFT OUTER JOIN CAPA CAP ON CAP.ID_ALB = ALB.ALB_ID ' +
                      '  WHERE ALB_ID = ' + cCp_id.ToString, TmpDataset    );

    if not TmpDataset.IsEmpty then
    begin
        Result.art_id   := TmpDataset.FieldByName('ART_ID').AsInteger;
        Result.art_nome := TmpDataset.FieldByName('ART_NOME').AsString;
        Result.art_categoria := TmpDataset.FieldByName('ART_CATEGORIA').AsString;
        Result.alb_id   := TmpDataset.FieldByName('ALB_ID').AsInteger;
        Result.alb_nome := TmpDataset.FieldByName('ALB_NOME').AsString;
        Result.id_art   := TmpDataset.FieldByName('ID_ART').AsInteger;
        Result.cp_id   := TmpDataset.FieldByName('CP_ID').AsInteger;
        Result.id_alb   := TmpDataset.FieldByName('ID_ALB').AsInteger;
        Result.cp_url := TmpDataset.FieldByName('CP_URL').AsString;
    end
    else
      raise EDatabaseError.CreateFmt('Capa "%d" não encontrada na base de dados!', [cCp_id]);
  finally
    TmpDataset.Free;
    FDConexao.Free;
  end;
end; }

class procedure TCapaService.CreateCapa(const ACapa: TCapa);
var
  FDConexao: TFDConnection;
const
  SQL_INSERT: string =
    'INSERT INTO CAPA (      ' + sLineBreak +
    '  ID_ALB, CP_URL       ' + sLineBreak +
    ') VALUES (               ' + sLineBreak +
    '  :ID_ALB, :CP_URL     ' + sLineBreak +
    ')';
begin
  if ACapa.cp_url.Trim.IsEmpty then
    raise EDatabaseError.Create('Nome da Capa é obrigatório');
  if ACapa.id_alb = 0 then
    raise EDatabaseError.Create('ID do album é obrigatório');

  FDConexao := TFDConnection.Create(nil);
  try
    FDConexao.ConnectionDefName := NOME_CONEXAO_BD;
    FDConexao.ExecSQL(SQL_INSERT,
      [
        ACapa.id_alb,
        'pjc-artistaxalbum\'+ACapa.cp_url
      ],
      [
        ftInteger,
        ftString
      ]
    );
  finally
    FDConexao.Free;
  end;
end;

class procedure TCapaService.UpdateCapa(const cCp_id: Integer; const ACapa: TCapa);
var
  FDConexao: TFDConnection;
  CountAtu: Integer;

const
  SQL_UPDATE: string =
    'UPDATE CAPA SET                ' + sLineBreak +
    '  ID_ALB = :ID_ALB,           ' + sLineBreak +
    '  CP_URL = :CP_URL  ' + sLineBreak +
    'WHERE CP_ID = :CP_ID            ';
begin
  if ACapa.cp_url.Trim.IsEmpty then
    raise EDatabaseError.Create('Nome da Capa é obrigatório');
  if ACapa.id_alb = 0 then
    raise EDatabaseError.Create('ID da Capa é obrigatório');

  FDConexao := TFDConnection.Create(nil);
  try
    FDConexao.ConnectionDefName := NOME_CONEXAO_BD;
    CountAtu := FDConexao.ExecSQL(SQL_UPDATE,
      [
        ACapa.ID_ALB,
        ACapa.CP_URL,
        cCp_id
      ],
      [
        ftInteger,
        ftString,
        ftInteger
      ]
    );

    if CountAtu <= 0 then
      raise Exception.Create('Nenhuma Capa foi atualizada');
  finally
    FDConexao.Free;
  end;
end;

class procedure TCapaService.DeleteCapa(const cCp_id: Integer);
var
  FDConexao: TFDConnection;
  CountDelete: Integer;
begin
  FDConexao := TFDConnection.Create(nil);
  try
    FDConexao.ConnectionDefName := NOME_CONEXAO_BD;

    CountDelete := FDConexao.ExecSQL(
      'DELETE FROM CAPA WHERE CP_ID = :CP_ID',
      [cCp_id],
      [ftInteger]
    );

    if CountDelete = 0 then
      raise EDatabaseError.Create('Nenhuma Capa foi excluida!');
  finally
    FDConexao.Free;
  end;
end;




end.

