unit u_JWTAuth;

interface

uses
  MVCFramework,
  System.Generics.Collections;

type
  TJWTAuth = class(TInterfacedObject, IMVCAuthenticationHandler)
  public
    procedure OnRequest(const AContext: TWebContext; const AControllerQualifiedClassName, AActionName: string;
      var AAuthenticationRequired: Boolean);
    procedure OnAuthentication(const AContext: TWebContext; const AUserName, APassword: string;
      AUserRoles: TList<string>;
      var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
    procedure OnAuthorization(const AContext: TWebContext; AUserRoles: TList<string>;
      const AControllerQualifiedClassName: string;
      const AActionName: string; var AIsAuthorized: Boolean);
  end;

const
  username = 'admin';
  password = 'password';

implementation

{ TJWTAuth }

procedure TJWTAuth.OnAuthentication(const AContext: TWebContext;
  const AUserName, APassword: string; AUserRoles: TList<string>;
  var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
begin
  // Lugar para checar usuario e senha

  AIsValid := False; // Seta autenticação invalida
  if (AUserName <> username) then
    exit;

  if (APassword <> password) then
    exit;

  AIsValid := True; // Se usuario e senha forem iguais
end;

procedure TJWTAuth.OnAuthorization(const AContext: TWebContext;
  AUserRoles: TList<string>; const AControllerQualifiedClassName,
  AActionName: string; var AIsAuthorized: Boolean);
begin
  // Lugar para definir os niveis de acesso

  // seta autorização para tudo
  AIsAuthorized := True;
end;

procedure TJWTAuth.OnRequest(const AContext: TWebContext;
  const AControllerQualifiedClassName, AActionName: string;
  var AAuthenticationRequired: Boolean);
begin
  // Lugar para definir quais requisições precisao de autenticação

  // seta autenticação para todas as requisições
  AAuthenticationRequired := True;
end;

end.
